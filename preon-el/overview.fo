<?xml version="1.0" encoding="utf-8"?><fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format" font-family="Calibri,Symbol,ZapfDingbats" font-size="10pt" text-align="left" line-height="normal" font-selection-strategy="character-by-character" line-height-shift-adjustment="disregard-shifts" writing-mode="lr-tb" language="en"><fo:layout-master-set><fo:simple-page-master master-name="blank" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body display-align="center" margin-bottom="0.5in" margin-top="0.5in" region-name="blank-body"/><fo:region-before region-name="xsl-region-before-blank" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-blank" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:page-sequence-master master-name="titlepage"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="titlepage-first" page-position="first"/><fo:conditional-page-master-reference master-reference="titlepage-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="titlepage-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="lot"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="lot-first" page-position="first"/><fo:conditional-page-master-reference master-reference="lot-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="lot-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="front"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="front-first" page-position="first"/><fo:conditional-page-master-reference master-reference="front-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="front-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="body"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="body-first" page-position="first"/><fo:conditional-page-master-reference master-reference="body-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="body-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="back"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="back-first" page-position="first"/><fo:conditional-page-master-reference master-reference="back-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="back-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="index"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="index-first" page-position="first"/><fo:conditional-page-master-reference master-reference="index-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="index-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master></fo:layout-master-set><fo:page-sequence xmlns:axf="http://www.antennahouse.com/names/XSL/Extensions" hyphenate="true" master-reference="body" language="en" format="1" initial-page-number="1" force-page-count="no-force" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2"><fo:static-content flow-name="xsl-region-before-first"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-odd"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block>Limbo Overview</fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-even"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block>Limbo Overview</fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-blank"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-footnote-separator"><fo:block><fo:leader color="black" leader-pattern="rule" leader-length="1in"/></fo:block></fo:static-content><fo:static-content flow-name="blank-body"><fo:block text-align="center"/></fo:static-content><fo:static-content flow-name="xsl-region-after-first"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-odd"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-even"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-blank"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:flow flow-name="xsl-region-body" start-indent="0mm" end-indent="0pt"><fo:block id="d5e1"><fo:block font-family="Calibri,Symbol,ZapfDingbats"><fo:block start-indent="0pt" text-align="center"><fo:block keep-with-next.within-column="always" font-size="24.8832pt" font-weight="bold"><fo:block keep-with-next.within-column="always" space-before.optimum="10pt" space-before.minimum="10pt * 0.8" space-before.maximum="10pt * 1.2" hyphenate="false" text-align="center" start-indent="0pt" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2">Limbo Overview</fo:block></fo:block><fo:block space-before="0.5em" font-size="14.4pt"><fo:block>Wilfred Springer</fo:block></fo:block></fo:block></fo:block></fo:block>
  
  
  
  <fo:block id="d5e11"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Introduction</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">1. Introduction</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Limbo is the code name of an expression language used in
      Preon<fo:footnote><fo:inline><fo:inline font-family="Calibri,Symbol,ZapfDingbats" font-size="75%" font-weight="normal" font-style="normal" baseline-shift="super">1</fo:inline></fo:inline><fo:footnote-body font-family="Calibri,Symbol,ZapfDingbats" font-size="8pt" font-weight="normal" font-style="normal" text-align="left" start-indent="0pt" text-indent="0pt" hyphenate="true" wrap-option="wrap" linefeed-treatment="treat-as-space">
      <fo:block><fo:inline font-family="Calibri,Symbol,ZapfDingbats" font-size="75%" font-weight="normal" font-style="normal" baseline-shift="super">1</fo:inline>Limbo used to be a separate project, however when moving
      to Preon 2.0, knowing that Limbo is only used inside Preon, it
      did not seem to make an aweful lot of sense to keep it a
      separate project, especially with some refactoring that had to
      be done.</fo:block>
      </fo:footnote-body></fo:footnote>. It allows you to evaluate expressions on a certain
      context. The expression language is fairly simple; it supports
      basic logical and arithmetic operators, and it supports
      attribute references and item references.
    </fo:block>
    <fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="example-simple"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Example 1. Simple Limbo Examples</fo:block>
      
      <fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="Consola" id="d5e18">3 * 4
3 * person.age
2 ^ group.persons[3].age
person.age &gt;= 12</fo:block>
    </fo:block></fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      ... and that's probably where the correspondence with the JSP
      Expression Language and other expression languages ends. Because
      there is a <fo:inline font-style="italic">big</fo:inline> difference with those
      languages. And that difference is not based on notation (syntax
      and grammar), but on the way you apply Limbo.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Here are some of the differences of Limbo:
    </fo:block>
    <fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d5e22"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d5e23"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
        <fo:block>
          Limbo supports <fo:inline font-style="italic">early binding</fo:inline>. That
          is, it will <fo:inline font-style="italic">validate</fo:inline> the correctness
          of the expression before it actually
          <fo:inline font-style="italic">evaluate</fo:inline> it. So, when you build the
          expression, you know if it is an expression that can be
          evaluated at runtime within a certain context.
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d5e28"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
        <fo:block>
          Limbo allows you to bind to <fo:inline font-style="italic">any</fo:inline>
          context, not just state exposed through bean properties or
          private fields. 
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="d5e31"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
        <fo:block>
          The Limbo API allows you to export the expression as a
          natural language based human readable snippet of text.
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Limbo originates from a project to capture dependencies in
      different fields in a binary media format in an unambiguous
      way. Using Limbo, that project is capable of generating a human
      readable description of the encoding format. Expressions like
      the ones mentioned in <fo:basic-link internal-destination="example-simple"><fo:inline>Example 1, “Simple Limbo Examples”</fo:inline></fo:basic-link> could be
      rendered into this:
    </fo:block>
    <fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="Consola" id="d5e35">
3 times 4
3 times the age of a person
2 to the power of the age of the third person in the group
the age of the person is greater than or equal to 2
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      This article is a tutorial on Limbo. It will explain the
      language itself, but it will also explain how you weave it into
      your own project.
    </fo:block>
  </fo:block>
  
  <fo:block id="d5e37"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The Language</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">2. The Language</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      The first thing you need to know about Limbo is that it is an
      <fo:inline font-style="italic">expression language</fo:inline>, intended to execute on
      a certain context. The context might be a fairly complicated
      data structure, or it may not. Two things are for sure: Limbo
      only allows you to refer to things by name or their index, and
      Limbo does <fo:inline font-style="italic">not</fo:inline> allow you to define complex
      structures in the language itself.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Let's start with the most commons example: let's look at an
      simple example object-based data structure. In <fo:basic-link internal-destination="fig-person"><fo:inline>Figure 1, “Simple data model”</fo:inline></fo:basic-link>, Persons have a name and an age, a father
      and mother, and optionally some children of their own.
    </fo:block>
    <fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="fig-person"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Figure 1. Simple data model</fo:block>
      
      <fo:block id="d5e46"><fo:external-graphic src="url(sample.png)" width="auto" height="auto" content-width="auto" content-height="auto"/></fo:block>
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Based on this, here are some example Limbo expressions, given
      that the context is a person.
    </fo:block>
    <fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="Consola" id="d5e50">
age // the age of the current person
age &gt;= 35 // the age is greater than or equal to 35
father.age // the age of the father
father.age + mother.age &gt;= 70 // the sum of the age of the father and
                              // the age of the mother is greater than 
                              //or equal to 70
children[0].age &lt; 7
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      There are a couple of lessons to learn from the example
      above. First of all, valid Limbo expressions always evaluate to
      boolean values or integer values. You wonder why? Well, simply
      because we did not need anything else. The whole purpose of
      Limbo is to express arithmetical and logical relationships
      between things. Producing text simply has never been a
      requirement.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      The next thing to notice is that the expressions do not look all
      that different than Java expressions<fo:footnote><fo:inline><fo:inline font-family="Calibri,Symbol,ZapfDingbats" font-size="75%" font-weight="normal" font-style="normal" baseline-shift="super">2</fo:inline></fo:inline><fo:footnote-body font-family="Calibri,Symbol,ZapfDingbats" font-size="8pt" font-weight="normal" font-style="normal" text-align="left" start-indent="0pt" text-indent="0pt" hyphenate="true" wrap-option="wrap" linefeed-treatment="treat-as-space">
      <fo:block><fo:inline font-family="Calibri,Symbol,ZapfDingbats" font-size="75%" font-weight="normal" font-style="normal" baseline-shift="super">2</fo:inline>
        Notice that I say it does not <fo:inline font-style="italic">look</fo:inline> all
        that different. It <fo:inline font-style="italic">actually</fo:inline> more
        different than you might expect. More on that somewhere else.
      </fo:block>
      </fo:footnote-body></fo:footnote>. It supports arithmetic operators ('+', '-', '/',
      '*', '^'), comparison operators ('&gt;', '&lt;', '&gt;=',
      '&lt;=', '==') and logical operators ('&amp;&amp;', '||', '!').
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      The third thing to notice is that you can refer to attributes
      as well as items. (In that sense, Limbo is comparable to
      Python.) In this example, that works out quite well. Objects
      also have attributes and some types of objects might have
      items. However, it is important to remember that Limbo does not
      bind to objects only. Limbo is able to bind to
      <fo:inline font-style="italic">any</fo:inline> model exposed as 'things' with
      attributes and items.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Integer literals can be expressed as decimals (1254),
      hexadecimals (0xFF, 0xff, etc.) or as binary numbers
      (0b10101011, 0b1001, etc.). Limbo ignores all whitespace.
    </fo:block>
  </fo:block>

  <fo:block id="d5e60"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The API</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">3. The API</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block id="d5e62"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Getting Started</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">3.1. Getting Started</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
      
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Let's start with a simple example first:
      </fo:block>
      <fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="example-simple-expression"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Example 2. Simple expression</fo:block>
        
          <fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="Consola" id="d5e67">Expression&lt;Integer, Person&gt;
          doubleAge = Expressions
    .from(Person.class)
    .toInteger("age * 2");
Person wilfred = new Person();
wilfred.name = "Wilfred";
wilfred.age = 35;
assert 70 == doubleAge.eval(wilfred);</fo:block>
      </fo:block></fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        In the first line, we build the
        <fo:inline font-family="Consola">Expression</fo:inline> instance. Since the
        expression is based on a <fo:inline font-family="Consola">Person</fo:inline> object,
        the <fo:inline font-family="Consola">from(...)</fo:inline> method takes
        <fo:inline font-family="Consola">Person</fo:inline> class reference. After that, we
        specify that we expect an integer result, and pass the
        expression at the same time. (The builder methods actually
        have a couple of other options, but we will leave that out for
        now.)
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Once the <fo:inline font-family="Consola">Expression</fo:inline> has been
        built, evaluating is simply calling
        <fo:inline font-family="Consola">eval(...)</fo:inline> on the expression, passing
        in the <fo:inline font-family="Consola">Person</fo:inline> instance. And - like you
        could have expected - the result is 70. Note there is no cast
        in order to compare to 70, courtesy of the use of generics and
        auto unboxing.
      </fo:block>
    </fo:block>
    <fo:block id="d5e77"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">The ReferenceContext</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">3.2. The ReferenceContext</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
      
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        I said before that Limbo is capable of binding to
        <fo:inline font-style="italic">anything</fo:inline> capable of representing itself
        as 'things' with named attributes and numbered items. Let me
        refine that: it is capable of binding to anything for which
        you can implement a
        <fo:inline font-family="Consola">ReferenceContext</fo:inline>. So, when in
        <fo:basic-link internal-destination="example-simple-expression"><fo:inline>Example 2, “Simple expression”</fo:inline></fo:basic-link> you passed in a
        Person class, under the hood, Limbo wrapped that inside a
        ReferenceContext.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Now, if you ever used an expression language like the JSP EL,
        then you are probably aware of a similar mechanism in that
        expression language. JSP EL has a
        <fo:inline font-family="Consola">VariableResolver</fo:inline>. Your EL
        expression can be evaluated against anything, as long as there
        is a <fo:inline font-family="Consola">VariableResolver</fo:inline> capable
        of resolving the named things.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        One of the differences between Limbo's ReferenceContext and
        JSP EL's VaribleResolver is that the ReferenceContext is
        parameterized with type of context passed in at evaluation
        time. Typically, with JSP EL, you will evaluate your
        expression against a context of of type
        <fo:inline font-family="Consola">java.lang.Object</fo:inline>. The Java compiler
        will not be able to verify if the subtype of
        <fo:inline font-family="Consola">java.lang.Object</fo:inline> you pass in is
        actually something against which you can evaluate the
        expression.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        If you are creating an expression in Limbo, you will always
        need to construct that expression parameterized
        <fo:inline font-family="Consola">ReferenceContext</fo:inline>, in which the
        type parameter is the type of object on which you can apply
        the expression. So if you have an expression you want to
        evaluate against an instance of <fo:inline font-family="Consola">Person</fo:inline>,
        you need to construct the
        <fo:inline font-family="Consola">Expression</fo:inline> based on a
        <fo:inline font-family="Consola">ReferenceContext&lt;Person&gt;</fo:inline>.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Now, you probably wonder why all of that is relevant. What's
        the purpose of adding the extra complexity of having to deal
        with parameterized types. After all, the JSP EL works fine
        with a non-parameterized
        <fo:inline font-family="Consola">VariableResolver</fo:inline>, and
        expressions accepting <fo:inline font-family="Consola">java.lang.Object</fo:inline>
        instances.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        The real reason for this is that Limbo is capable of early
        binding. <fo:inline font-family="Consola">ReferenceContext</fo:inline>
        implementations can make guarantees on the validity of
        references used in the expression. Which means that the
        Expression based on that ReferenceContext can guarantee it
        will be capable of acting upon a certain context.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        <fo:basic-link internal-destination="example-reference-context"><fo:inline>Example 3, “ReferenceContext and References”</fo:inline></fo:basic-link> shows how you
        build references using a
        <fo:inline font-family="Consola">ReferenceContext</fo:inline>. In this case,
        the data model to which we bind is a Java version of the
        object model outlined in <fo:basic-link internal-destination="fig-person"><fo:inline>Figure 1, “Simple data model”</fo:inline></fo:basic-link>. The
        <fo:inline font-family="Consola">ClassReferenceContext</fo:inline> used in this case
        not only allows you to build references to data contained by
        an instance of that class, but will also check for the
        existence of those attributes. Any attempt to reference
        something that is not defined by the class will generate a
        <fo:inline font-family="Consola">BindingException</fo:inline>. 
      </fo:block>
      <fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="example-reference-context"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Example 3. ReferenceContext and References</fo:block>
        
        <fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="Consola" id="d5e107">
ReferenceContext&lt;Person&gt; context = 
  new ClassReferenceContext&lt;Person&gt;(Person.class);
Reference&lt;Person&gt; personsName = 
  context.selectAttribute("name");
Reference&lt;Person&gt; fathersName = 
  context.selectAttribute("father").selectAttribute("name");
Person wilfred = new Person();
wilfred.name = "Wilfred";
wilfred.age = 35;
Person levi = new Person();
levi.name = "Levi";
levi.age = 8;
levi.father = wilfred;
assert "Levi".equals(personsName.resolve(levi));
assert "Wilfred".equals(fathersName.resolve(levi));
assert "Wilfred".equals(personsName.resolve(wilfred));
// ... and this will throw a BindingException
Reference&lt;Person&gt; gender = context.selectAttribute("gender");
        </fo:block>
      </fo:block></fo:block>
    </fo:block>
    <fo:block id="d5e108"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Natural Language Description</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">3.3. Natural Language Description</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
      
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Early validation is not the only benefit we gain from
        <fo:inline font-family="Consola">ReferenceContexts</fo:inline> supporting
        early binding. Another benefit is that we basically gather
        enough information to generate a fairly decent description of
        the References created.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        In the example above, the fathersName reference will be
        printed as: "the name (a String) of the father (a Person) of a
        Person ". Now, this description might not be ideally suited in
        your case, but the way your reference is rendered is
        <fo:inline font-style="italic">also</fo:inline> determined by the
        <fo:inline font-family="Consola">ReferenceContext</fo:inline>. You can
        basically render it any way you like, as long as you are
        willing to go through the trouble of implementing your own
        <fo:inline font-family="Consola">ReferenceContext</fo:inline>.
      </fo:block>
    </fo:block>
  </fo:block>
  <fo:block id="d5e116"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Embedding Limbo</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">4. Embedding Limbo</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      If you ever consider using Limbo, you will most likely do that
      for its abilities to provide early validation of expressions,
      and the ability to turn expressions into human-readable
      descriptions. 
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      There is a problem here though. Limbo doesn't define a single
      ideal way of 'early binding' the expression to a
      context. <fo:inline font-style="italic">You</fo:inline> may feel that binding an
      expression to private inner variables of an object makes perfect
      sense. Other people will consider that to be malpractice, and
      require a way to have early validation of expressions bound to
      getters and setters. So where do you encode these policies? 
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Similarly, Limbo also does not define a single ideal way to turn
      expressions into human readable language. Of course, you will
      most likely benefit from Limbo's abilities to turn the main part
      of the expression into human readable text, but you will
      probably have a preference for deciding how references should be
      translated in human readable text. Like, do you want it to be
      like 'the age of the person', 'the value of the age property of
      a Person object', or 'person.age'? Again, what do you implement
      in order to encode these policies?
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      The <fo:inline font-family="Consola">ReferenceContext</fo:inline> is the
      answer to both of these questions. So basically, embedding Limbo
      in a context, normally starts by implementing a
      <fo:inline font-family="Consola">ReferenceContext</fo:inline>. And, in all
      honesty, that's basically it. Once you start by implementing a
      <fo:inline font-family="Consola">ReferenceContext</fo:inline>, you will
      quickly run into having the need to implement various
      <fo:inline font-family="Consola">Reference</fo:inline>s yourself, you so
      probably need to take a peek at that interface as well.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      I currently can't tell you which
      <fo:inline font-family="Consola">ReferenceContext</fo:inline>s and
      <fo:inline font-family="Consola">Reference</fo:inline>s you will want to
      implement. That will be based totally on your own
      needs. However, I can give you some examples on the use of
      ReferenceContexts in Preon itself. That
      should give you a bit of a flavor on what you can do.
    </fo:block>
  </fo:block>
  <fo:block id="d5e131"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Limbo in Preon</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">5. Limbo in Preon</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block id="d5e133"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">BindingsContext</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">5.1. BindingsContext</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
      
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        References in expressions used in Preon are not bound to
        properties. And although references typically resolve to
        values of (private) fields, the reverse doesn't hold. So, not
        every (private) field can be addressed by a reference in
        Preon. In fact, in general only fields that have been marked
        as 'bound' can be referenced from an expression. Other
        (private) fields are not even seen. 
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        The reason behind this is fairly simple. Preon's objective is
        to make sure that you can always generate documentation on the
        encoded representation from the annotated data structure. If
        the 'specification' (data structure + annotations) would
        contain references to fields that have been populated outside
        of Preon's control, then that description would have
        'dangling' references; references that point to something of
        which we don't know anything at all. So essentially, it would
        leave holes in the documentation.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        That's where the <fo:inline font-family="Consola">BindingsContext</fo:inline> comes
        into play. Almost all references in Preon are rooted in the
        <fo:inline font-family="Consola">BindingsContext</fo:inline>. While constructing the
        <fo:inline font-family="Consola">Codec</fo:inline>, Preon will construct a
        <fo:inline font-family="Consola">BindingsContext</fo:inline> for
        <fo:inline font-style="italic">every</fo:inline> non-trivial class for which it
        needs a <fo:inline font-family="Consola">Codec</fo:inline>. So it won't construct a
        <fo:inline font-family="Consola">BindingsContext</fo:inline> for a Codec decoding a
        Date, or an Integer, but it <fo:inline font-style="italic">will</fo:inline> create
        an instance for your own homegrown class with a couple of
        'bound' fields.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Now, if you closely examine the
        <fo:inline font-family="Consola">ReferenceContext</fo:inline>'s interface,
        then you will notice that it has
        <fo:inline font-family="Consola">selectAttribute</fo:inline> and
        <fo:inline font-family="Consola">selectItem</fo:inline> methods. When creating a
        reference to the value of a bound field named 'foobar', then
        what essentially is happening is that (in case of a named
        attribute), the <fo:inline font-family="Consola">selectAttribute</fo:inline> is
        called with the name 'foobar'. The
        <fo:inline font-family="Consola">BindingsContext</fo:inline> will return a
        <fo:inline font-family="Consola">Reference</fo:inline> object that
        eventually will resolve correctly into the value of
        foobar.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Remember that <fo:inline font-family="Consola">Reference</fo:inline> itself
        is not the end of it. A
        <fo:inline font-family="Consola">Reference</fo:inline>
        <fo:inline font-style="italic">can</fo:inline> be used to determine a value at
        runtime, but it also offers the option of selecting other
        parts of the data structure by calling one of the
        <fo:inline font-family="Consola">Reference</fo:inline>'s own
        <fo:inline font-family="Consola">selectAttribute</fo:inline> or
        <fo:inline font-family="Consola">selectItem</fo:inline> methods. 
      </fo:block>
    </fo:block>
    <fo:block id="d5e160"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">ImportSupportingObjectResolverContext</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">5.2. ImportSupportingObjectResolverContext</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
      
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        This one definitely deserves an explanation, even it were only
        because of its incredible long name. In the previous section,
        I already alluded to the fact that <fo:inline font-style="italic">not
        all</fo:inline> references are references to bound
        fields. Preon uses more than one ReferenceContext, and this
        one in particular is sometimes wrapped around an existing
        ReferenceContext in order to make sure <fo:inline font-style="italic">you can
        refer to constants</fo:inline>.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        So this is how it works. If you want to refer to constant
        values inside your expressions, then you will need to have a
        way to define those constants. Preon simply allows you to
        define these constants as you would normally do in
        Java. However, that does not automatically pull them into
        scope of your expressions. In order to 'import' these constant
        definitions, you place an
        <fo:inline font-family="Consola">@ImportStatic</fo:inline> annotation on
        top of the class containing references to these constants. 
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        The
        <fo:inline font-family="Consola">ImportSupportingObjectResolverContext</fo:inline>
        will be instantiated by the
        <fo:inline font-family="Consola">ObjectCodecFactory</fo:inline> for every class for
        which it creates a <fo:inline font-family="Consola">Codec</fo:inline>, <fo:inline font-style="italic">if
        and only if that class has the
        <fo:inline font-family="Consola">@ImportStatic</fo:inline>
        annotation</fo:inline>.
      </fo:block>
    </fo:block>
    <fo:block id="d5e173"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Index in Offset Expressions</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">5.3. Index in Offset Expressions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
      
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        When you use <fo:inline font-family="Consola">@BoundList</fo:inline>, then
        Preon allows you to specify an offset attribute; that offset
        attribute can be an expression. The expression allows you to
        calculate the <fo:inline font-style="italic">starting position</fo:inline> of an
        element, given a certain context. Question of course is
        <fo:inline font-style="italic">which element</fo:inline>?
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        It turns out that the offset attribute actually introduces a
        new variable, on top of all variables already in scope. That
        variable is the 'index'. You can express the offset of an
        element in terms of that index, by simply referring to that
        variable. 
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        The 'index' variable doesn't come to life just like that. Just
        like with all of the other examples shown before, it requires
        a <fo:inline font-family="Consola">ReferenceContext</fo:inline> to make sure
        the framework understands the existence of this variable. That
        particular <fo:inline font-family="Consola">ReferenceContext</fo:inline> is
        also responsible for generating a proper human readable
        description for that reference in case the framework requires
        it.
      </fo:block>
    </fo:block>
  </fo:block>

  <fo:block id="d5e183"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Summary</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">6. Summary</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Limbo originally started out as a project to have an expression
      language catering for the needs of Preon: it required an
      expression language with APIs for embedding it inside a context
      that required early binding, and an API for turning expressions
      into human readable text.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      The <fo:inline font-family="Consola">ReferenceContext</fo:inline> is one of
      the central abstractions for having early validation. From the
      <fo:inline font-family="Consola">ReferenceContext</fo:inline>, you will create
      <fo:inline font-family="Consola">Reference</fo:inline>s. Those
      <fo:inline font-family="Consola">Reference</fo:inline>s embody everything
      there is to know about a reference, including information on how
      the reference should be rendered into a human-readable
      descriptive reference.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Limbo was eventually folded back into Preon as the preon-el
      module, in order to ease migration to Preon 2.0.
    </fo:block>
  </fo:block>

</fo:flow></fo:page-sequence></fo:root>