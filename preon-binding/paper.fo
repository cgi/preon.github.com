<?xml version="1.0" encoding="utf-8"?><fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format" font-family="Calibri,Symbol,ZapfDingbats" font-size="10pt" text-align="left" line-height="normal" font-selection-strategy="character-by-character" line-height-shift-adjustment="disregard-shifts" writing-mode="lr-tb" language="en"><fo:layout-master-set><fo:simple-page-master master-name="blank" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body display-align="center" margin-bottom="0.5in" margin-top="0.5in" region-name="blank-body"/><fo:region-before region-name="xsl-region-before-blank" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-blank" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="titlepage-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="lot-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="front-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="body-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="back-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="1"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-first" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-first" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-first" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-odd" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-odd" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-odd" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:simple-page-master master-name="index-even" page-width="8.5in" page-height="11in" margin-top="0.5in" margin-bottom="0.5in" margin-left="1in" margin-right="1in"><fo:region-body margin-bottom="0.5in" margin-top="0.5in" column-gap="12pt" column-count="2"/><fo:region-before region-name="xsl-region-before-even" extent="0.4in" display-align="before"/><fo:region-after region-name="xsl-region-after-even" extent="0.4in" display-align="after"/></fo:simple-page-master><fo:page-sequence-master master-name="titlepage"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="titlepage-first" page-position="first"/><fo:conditional-page-master-reference master-reference="titlepage-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="titlepage-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="lot"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="lot-first" page-position="first"/><fo:conditional-page-master-reference master-reference="lot-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="lot-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="front"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="front-first" page-position="first"/><fo:conditional-page-master-reference master-reference="front-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="front-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="body"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="body-first" page-position="first"/><fo:conditional-page-master-reference master-reference="body-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="body-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="back"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="back-first" page-position="first"/><fo:conditional-page-master-reference master-reference="back-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="back-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="index"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference master-reference="blank" blank-or-not-blank="blank"/><fo:conditional-page-master-reference master-reference="index-first" page-position="first"/><fo:conditional-page-master-reference master-reference="index-odd" odd-or-even="odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="index-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master></fo:layout-master-set><fo:page-sequence xmlns:axf="http://www.antennahouse.com/names/XSL/Extensions" hyphenate="true" master-reference="body" language="en" format="1" initial-page-number="1" force-page-count="no-force" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2"><fo:static-content flow-name="xsl-region-before-first"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-odd"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block>Preon: Bit Syntax for Java</fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-even"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block>Preon: Bit Syntax for Java</fo:block></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-blank"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="right" display-align="before" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-footnote-separator"><fo:block><fo:leader color="black" leader-pattern="rule" leader-length="1in"/></fo:block></fo:static-content><fo:static-content flow-name="blank-body"><fo:block text-align="center"/></fo:static-content><fo:static-content flow-name="xsl-region-after-first"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-odd"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-even"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-blank"><fo:block font-family="Calibri,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell text-align="start" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell text-align="center" display-align="after" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell text-align="end" display-align="after" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:flow flow-name="xsl-region-body" start-indent="0mm" end-indent="0pt"><fo:block id="d5e1"><fo:block font-family="Calibri,Symbol,ZapfDingbats"><fo:block start-indent="0pt" text-align="center"><fo:block keep-with-next.within-column="always" font-size="24.8832pt" font-weight="bold"><fo:block keep-with-next.within-column="always" space-before.optimum="10pt" space-before.minimum="10pt * 0.8" space-before.maximum="10pt * 1.2" hyphenate="false" text-align="center" start-indent="0pt" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2">Preon: Bit Syntax for Java</fo:block></fo:block><fo:block space-before="0.5em" font-size="14.4pt"><fo:block>Wilfred Springer</fo:block></fo:block><fo:block space-before="0.5em">April 24, 2009</fo:block><fo:block space-before="0.5em" text-align="start" margin-left="0.5in" margin-right="0.5in" font-family="Calibri,Symbol,ZapfDingbats"><fo:block start-indent="0.0in" end-indent="0.0in"><fo:block font-family="Calibri,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="10pt" space-before.minimum="10pt * 0.8" space-before.maximum="10pt * 1.2" hyphenate="false" text-align="center"><fo:block font-family="Calibri,Symbol,ZapfDingbats" font-weight="bold" keep-with-next.within-column="always" space-before.optimum="10pt" space-before.minimum="10pt * 0.8" space-before.maximum="10pt * 1.2" hyphenate="false" text-align="center">Abstract</fo:block></fo:block><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Writing software to deal with compressed media formats is not
        trivial. The same knowledge about the encoded representation
        will often be replicated in both the decoder, the encoder, as
        well as the documentation on the media format. As a consequence,
        the software is hard to maintain. This paper introduces Preon, a
        framework addressing these concerns. Preon allows you to define
        the mapping between an encoded representation and the in-memory
        representation just once, and get the decoder, the encoder and
        documentation for free.
      </fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

  


  <fo:block id="d5e16"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Introduction</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">1. Introduction</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Contrary to popular widespread believe, only a fraction of the
      data stored on disk and traversing the network is encoded in
      XML. A significant portion of the data floating around on the
      Internet is encoded using an abundance of compression
      techniques, often relying on data being encoded in a number of
      bits rather than a number of bytes.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      This paper introduces Preon, a framework addressing the
      challenges for writing software dealing with binary encoded
      data.
    </fo:block>
  </fo:block>

  <fo:block id="d5e20"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Challenges</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">2. Challenges</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Writing software capable of dealing with these media formats is
      not trivial, for various reasons:
    </fo:block>
    <fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d5e23"><fo:list-item space-before.optimum="0em" space-before.minimum="0em" space-before.maximum="0.2em" id="d5e24"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
        <fo:block>
          Not trivial because of the abundance of compression
          techniques available and in use;
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="0em" space-before.minimum="0em" space-before.maximum="0.2em" id="d5e26"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
        <fo:block>
          Not trivial because of the inter-dependencies between
          various parts of the encoded representation;
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="0em" space-before.minimum="0em" space-before.maximum="0.2em" id="d5e28"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
        <fo:block>
          Not trivial because of resource constraints;
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="0em" space-before.minimum="0em" space-before.maximum="0.2em" id="d5e30"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
        <fo:block>
          And related to that, not trivial because of the need often
          present to pull data in
          <fo:inline font-style="italic">only</fo:inline>
          on demand.
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      As a consequence of these complications, most software
      responsible for encoding and decoding binary encoded data is
      notoriously hard to maintain. In most cases, knowledge about the
      encoding format is replicated in both the decoder, the encoder
      <fo:inline font-style="italic">and</fo:inline>
      in the documentation.
    </fo:block>
  </fo:block>

  <fo:block id="d5e35"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Preon Summarized</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">3. Preon Summarized</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Preon is a framework for dealing with bitstream compressed data,
      addressing the concerns outlined above. Preon originated from an
      attempt to restructure the way to deal with map files and other
      compressed file formats in use at TomTom.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Preon's scope and ambitions can be summarized like this:
    </fo:block>
    <fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="d5e39"><fo:list-item space-before.optimum="0em" space-before.minimum="0em" space-before.maximum="0.2em" id="d5e40"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
        <fo:block>
          Preon allows you to capture<fo:inline font-style="italic">intent</fo:inline>.
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="0em" space-before.minimum="0em" space-before.maximum="0.2em" id="d5e43"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
        <fo:block>
          Preon allows you to capture the
          <fo:inline font-style="italic">format of the
            encoded representation
          </fo:inline>
          unambiguously in
          declarative way.
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="0em" space-before.minimum="0em" space-before.maximum="0.2em" id="d5e46"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
        <fo:block>
          Preon allows you to capture the mapping between the encoded
          representation and the in-memory data structure.
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="0em" space-before.minimum="0em" space-before.maximum="0.2em" id="d5e48"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
        <fo:block>
          Preon uses the meta data outlined above to build a
          codec for decoding the data.
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="0em" space-before.minimum="0em" space-before.maximum="0.2em" id="d5e50"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
        <fo:block>
          Preon uses the meta data to generate hyperlinked
          human-readable documentation on the encoded representation.
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
  </fo:block>

  <fo:block id="d5e52"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Preon's Bitstream Structure Description Language</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">4. Preon's Bitstream Structure Description Language</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Unlike some of the other approaches that have been taken towards
      this problem (see<fo:basic-link internal-destination="section-languages"><fo:inline>Section 8, “Bitstream Structure Description Languages”</fo:inline></fo:basic-link>), Preon
      does
      <fo:inline font-style="italic">not</fo:inline>
      rely on XML or a DSL to capture
      the specifics of a format. Instead, it relies on annotations on
      the classes defining the runtime representation of the encoded
      representation.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Suppose there is a need to capture how a certain color is
      encoded in some graphical file format, and let us assume that
      the RGB components are values ranging from 0 to 255. Then based
      on that simple model,
      <fo:basic-link internal-destination="example-color"><fo:inline>Example 1, “Simple Example”</fo:inline></fo:basic-link>
      illustrates how you would specify the structure of that format,
      and how it maps to your in-memory data representation.
      <fo:basic-link internal-destination="example-decode"><fo:inline>Example 2, “Decoding Color”</fo:inline></fo:basic-link>
      illustrates how you would use this
      'specification' to decode a color from a byte array.
    </fo:block>
    <fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="example-color"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Example 1. Simple Example</fo:block>
      
      <fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="Consola" id="d5e62">class Color {
@Bound byte red;
@Bound byte green;
@Bound byte blue;
}</fo:block>
    </fo:block></fo:block>
    <fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="example-decode"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Example 2. Decoding Color</fo:block>
      
      <fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="Consola" id="d5e65">
Codec&lt;Color&gt; codec = Codecs.create(Color.class);
Color color = codecs.decode(codec, new byte[] { 0x33, 0x22, 0x11 });      
</fo:block>
    </fo:block></fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Preon supports the notion of convention over configuration. By
      default, a byte that is marked as @Bound will be decoded based
      on the most natural approach you would expect for decoding a
      byte: take 8 bits from the bitstream, and assume that to be the
      signed representation of the byte you're expecting to
      read. Similarly, an @Bound annotation on a boolean field will
      cause the boolean to be decoded based on a single bit.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      There may and
      <fo:inline font-style="italic">will</fo:inline>
      however be cases in
      which these defaults are not the proper way to go. In some
      cases, you might expect the byte to be encoded in four bits
      only, for instance. In order be more specific on how values
      should be decoded, Preon allows you to use more specific
      annotations.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      <fo:basic-link internal-destination="example-color-collection"><fo:inline>Example 3, “Color collection”</fo:inline></fo:basic-link>
      illustrates a situation in
      which specifying more meta data is required. It involves
      collection of colors, in which the format allocates two bytes
      for the number of colors in the collection, and an array of
      colors that holds the definitions of these colors.
    </fo:block>
    <fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="example-color-collection"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Example 3. Color collection</fo:block>
      
      <fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="Consola" id="d5e73">class ColorCollection {
@BoundNumber(size="16") int nrColors;
@BoundList(size="nrColors") Color[] colors;
}</fo:block>
    </fo:block></fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      <fo:basic-link internal-destination="example-color-collection"><fo:inline>Example 3, “Color collection”</fo:inline></fo:basic-link>
      not only illustrates
      the use of more specific annotations, it also illustrates that
      Preon allows you to define dependencies between different data
      elements: the length of the colors array is based on the number
      of colors provided by nrColors.
    </fo:block>
  </fo:block>
  <fo:block id="d5e76"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Preon Expressions</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">5. Preon Expressions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      The size attribute on @BoundList in
      <fo:basic-link internal-destination="example-color-collection"><fo:inline>Example 3, “Color collection”</fo:inline></fo:basic-link>
      is interpreted as a
      Limbo
      <fo:footnote><fo:inline><fo:inline font-family="Calibri,Symbol,ZapfDingbats" font-size="75%" font-weight="normal" font-style="normal" baseline-shift="super">1</fo:inline></fo:inline><fo:footnote-body font-family="Calibri,Symbol,ZapfDingbats" font-size="8pt" font-weight="normal" font-style="normal" text-align="left" start-indent="0pt" text-indent="0pt" hyphenate="true" wrap-option="wrap" linefeed-treatment="treat-as-space">
        <fo:block><fo:inline font-family="Calibri,Symbol,ZapfDingbats" font-size="75%" font-weight="normal" font-style="normal" baseline-shift="super">1</fo:inline>
          See<fo:basic-link external-destination="url(http://limbo.sourceforge.net/)">http://limbo.sourceforge.net/</fo:basic-link>.
        </fo:block>
      </fo:footnote-body></fo:footnote>
      expression. Applied in this context, the expression
      language not only allows you to refer to data previously read in
      that same data structure, but it also allows you point to the
      outer context (for inner classes), to items of collections, and
      to properties of objects. Limbo allows you to build expressions
      by combining these references and literal values using logical
      and arithmetic operators.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Limbo has been designed specifically for Preon. Its support for
      early binding is used when building Codecs for a certain data
      element; if expressions contain invalid references, this will be
      discovered during the construction of the Codec,
      <fo:inline font-style="italic">before</fo:inline>
      using the Codec to decode a piece of
      data.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      The early binding capability is not the only difference between
      Limbo and other expression language libraries existing in the
      Java space. Another difference is its support for producing a
      human-readable translation of the expression. Preon's
      support for generation documentation from a Codec relies heavily
      on this capability.
    </fo:block>
  </fo:block>

  <fo:block id="d5e86"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Preon Codecs</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">6. Preon Codecs</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      The Codec constructed as illustrated in
      <fo:basic-link internal-destination="example-decode"><fo:inline>Example 2, “Decoding Color”</fo:inline></fo:basic-link>
      not only allows you to decode a
      binary representation of the runtime representation of the data
      structure; it
      <fo:inline font-style="italic">also</fo:inline>
      captures everything
      known about that data structure. In fact, it is only capable of
      decoding the binary encoded representation as a consequence of
      the fact that it captures all meta data of the binary encoded
      representation.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Preon does not generate any source code or byte code. That means
      that - rather than generating a one-of Codec - the Codec is
      <fo:inline font-style="italic">assembled</fo:inline>
      at runtime from smaller Codecs,
      each with their own limited responsibility.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      In<fo:basic-link internal-destination="example-color"><fo:inline>Example 1, “Simple Example”</fo:inline></fo:basic-link>, the Codec constructed from
      the Color class is an ObjectCodec that delegates to three
      instances of NumberCodec. The ObjectCodec understands the
      relationship between the object's attributes and the Codecs
      required to decode data into those attributes.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      The Codec constructed from the other example (<fo:basic-link internal-destination="example-color-collection"><fo:inline>Example 3, “Color collection”</fo:inline></fo:basic-link>) is an ObjectCodec that
      delegates to a NumberCodec and a ListCodec. The ListCodec in
      turn relies on an ObjectCodec for Color instances, which - as we
      have seen before - relies on three NumberCodecs to decode the
      bytes representing the RGB components of that color.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      <fo:basic-link internal-destination="fig-codec"><fo:inline>Figure 1, “Codecs Linked to Data Structure”</fo:inline></fo:basic-link>
      depicts the relationship between the
      the classes representing a data structure at runtime, and the
      Codecs responsible for decoding the data from its binary encoded
      representation.
    </fo:block>
    <fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="fig-codec"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Figure 1. Codecs Linked to Data Structure</fo:block>
      
      <fo:block id="d5e101"><fo:external-graphic src="url(img/rsbmp-codecs.png)" width="10cm" height="auto" content-width="scale-to-fit" content-height="scale-to-fit"/></fo:block>
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Creating Codecs this way has a number of important benefits. The
      most important benefit is that it makes the framework
      extensible. Codecs that delegate to other Codecs do not need to
      have deep insight into the specifics of the Codecs they are
      targeting. The Codec interface is fairly simply, and really
      abstract. If in the future, there would be other types of Codecs
      to delegate to (Codecs that would decode data using compression
      techniques not yet known today), then the governing Codec does
      not need to know about the specifics in order to use that new
      type of Codec it's delegating to. (See also<fo:basic-link internal-destination="section-flavor"><fo:inline>Section 8.1, “Flavor”</fo:inline></fo:basic-link>.)
    </fo:block>
  </fo:block>

  <fo:block id="d5e106"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Preon Documentation</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">7. Preon Documentation</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Given the fact that Preon captures all meta data known on a file
      format into a tree of Codecs, it is also capable of leveraging
      that meta data to generate documentation on the file
      format. And, as with decoding the data, the process of building
      documentation is broken apart and delegated to each individual
      Codec that is part of the chain of responsibility hanging of the
      top level Codec.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Basically, when requesting documentation based on a certain
      Codec (see<fo:basic-link internal-destination="example-build-documentation"><fo:inline>Example 4, “Building documentation”</fo:inline></fo:basic-link>), the
      process will figure out how to best organize the document, and
      then give every Codec the change to render itself in the most
      appropriate way.
    </fo:block>
    <fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="example-build-documentation"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Example 4. Building documentation</fo:block>
      
      <fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="Consola" id="d5e113">Codec&lt;Color&gt; codec = Codecs.create(Color.class);
Codecs.document(codec, DocumentType.Html, new File(...));
</fo:block>
    </fo:block></fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      <fo:basic-link internal-destination="fig-documentation"><fo:inline>Figure 2, “Documentation on Java's class file Format”</fo:inline></fo:basic-link>
      illustrates the hyperlinked
      HTML output of a call to Codecs.document(...). In this
      particular case, it shows an excerpt of the documentation
      generated from a Preon description of Java's class file
      format
      <fo:footnote><fo:inline><fo:inline font-family="Calibri,Symbol,ZapfDingbats" font-size="75%" font-weight="normal" font-style="normal" baseline-shift="super">2</fo:inline></fo:inline><fo:footnote-body font-family="Calibri,Symbol,ZapfDingbats" font-size="8pt" font-weight="normal" font-style="normal" text-align="left" start-indent="0pt" text-indent="0pt" hyphenate="true" wrap-option="wrap" linefeed-treatment="treat-as-space">
        <fo:block><fo:inline font-family="Calibri,Symbol,ZapfDingbats" font-size="75%" font-weight="normal" font-style="normal" baseline-shift="super">2</fo:inline>
          The full documentation can be downloaded from<fo:basic-link external-destination="url(http://preon.flotsam.nl/classfile.html)">http://preon.flotsam.nl/classfile.html</fo:basic-link>.
        </fo:block>
      </fo:footnote-body></fo:footnote>
      .
    </fo:block>
    <fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="fig-documentation"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Figure 2. Documentation on Java's class file Format</fo:block>
      
      <fo:block id="d5e121"><fo:external-graphic src="url(img/documentation.png)" width="11cm" height="auto" content-width="scale-to-fit" content-height="scale-to-fit"/></fo:block>
    </fo:block>
  </fo:block>

  <fo:block id="section-languages"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Bitstream Structure Description Languages</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">8. Bitstream Structure Description Languages</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Preon is not the first attempt to capture bitstream structure in
      a formal way. There are a number of initiatives working in a
      similar direction. This paper is not aiming at providing a full
      overview of all of these other initiatives. It will only
      highlight some of them, in order to illustrate the differences
      with the approach Preon is taking.
    </fo:block>
    <fo:block id="section-flavor"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Flavor</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">8.1. Flavor</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
      
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Flavor
        <fo:basic-link internal-destination="bib-flavor-1"><fo:inline>[4]</fo:inline></fo:basic-link>
        offers a DSL for
        defining the structure of a bitstream. The tool-chain rewrites
        specifications written in this DSL into C++ and Java sources
        for both the decoding and encoding logic, as well as the
        classes capable of capturing the data structures encoded in
        the bitstream. Data will be decoded in a single pass, and the
        entire data structure needs to fit on the heap.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Flavor was one of the solutions originally considered when
        searching for an alternative solution for decoding TomTom map
        files. Unfortunately, Flavor is not extensible; it is
        impossible to add support for other compression techniques
        without rewriting the code generator that takes Flavor input
        and produces Java / C++.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Preon allows you to extend its support for compression
        techniques by implementing a number of interfaces, and
        registering these extensions with the framework at
        runtime. The extensions may be triggered by annotations,
        particular data types, or by combinations of annotations and
        particular data types.
        <fo:basic-link internal-destination="example-extension"><fo:inline>Example 5, “Potential Extension”</fo:inline></fo:basic-link>
        illustrates a situation in which an extension is triggered by
        a new annotation introduced by the extension. Note how the
        framework supports using the new annotation in combination
        with other, predefined annotations.
      </fo:block>
      <fo:block><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" keep-together.within-column="always" id="example-extension"><fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" font-weight="bold" font-size="12pt" hyphenate="false" space-after.minimum="0.4em" space-after.optimum="0.6em" space-after.maximum="0.8em" keep-with-next.within-column="always">Example 5. Potential Extension</fo:block>
        
        <fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="Consola" id="d5e136">@BoundHuffmanCoded(...) String name;
@Bound boolean isCity;	
</fo:block>
      </fo:block></fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Flavor's processing model also turned out to be problematic
        for processing map data. Flavor is only capable of reading the
        entire data structure into memory in a single pass. All of the
        map data in a 1.5 GB map file would - once uncompressed - be
        much larger than feasible.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Preon will
        <fo:inline font-style="italic">not</fo:inline>
        read the entire data
        structure in a single pass. By default, it will determine
        which parts of the data structure can be loaded lazily, and
        then choose to do so. The paradigm is closer to random access
        than streaming.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Last, but not least, when examining Flavor for use on map
        files, it turned out that the API constructed by it is not
        threadsafe. Preon can be accessed by multiple threads, in case
        the data is read from a ConcurrentBitBuffer that it it
        shipping.
      </fo:block>
    </fo:block>
    <fo:block id="d5e141"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Erlang Bit Syntax</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">8.2. Erlang Bit Syntax</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
      
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        The Erlang programming language has support for bitstream
        structure descriptions built into the language<fo:basic-link internal-destination="bib-erlang-bit-syntax"><fo:inline>[3]</fo:inline></fo:basic-link>. The actual description is
        specified as a pattern, which can then - using Erlang's
        pattern matching syntax - be used to break a bitstream apart
        into its different constituents, and stored in the
        corresponding variables.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Although Erlang's bit syntax is powerful, and its tight
        integration with the language is a bless, it also has
        limitations. First of all, it most well fit for flat data
        structures, without any nesting or interdependencies between
        different data elements read. In case of more complicated data
        structures, Erlang's bit syntax is still a convenient tool,
        but it
        <fo:inline font-style="italic">will</fo:inline>
        require writing some
        imperative code to deal with the complexity.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Preon supports a wider range of data structures out of the
        box. However, given the huge number of compression techniques
        out there, it will not be enough to cater for every existing
        encoding format. In order to deal with that, Preon offers
        its extension points, allowing you to make your own extensions
        as well supported as the encoding techniques supported out of
        the box.
      </fo:block>
    </fo:block>
    <fo:block id="d5e148"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">BSDL, XFlavor, BFlavor, gBFlavor</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">8.3. BSDL, XFlavor, BFlavor, gBFlavor</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
      
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        XFlavor
        <fo:basic-link internal-destination="bib-xflavor"><fo:inline>[2]</fo:inline></fo:basic-link>
        is an extension of
        Flavor, supporting XML features. It takes the Flavor syntax of
        a bitstream structure description, and turns it into XML. The
        MPEG-21 Bitstream Syntax Description Language is a tool of the
        MPEG-21 specification, to assist in customizing scalable
        bitstreams. BFlavor and gBFlavor combine these different
        technologies.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Although all of these technologies address problems in the
        same space as Preon, the emphasis seems to be on streaming
        data, and the approach is quite different than Preon's. There
        seems to be an emphasis on using XML in all of these
        technologies. Preon opted for capturing the bitstream syntax
        description in a programming language, to avoid having to
        generate source code, and to be able to not only capture meta
        data on a particular encoding technique, but also its
        behaviour.
      </fo:block>
    </fo:block>
    <fo:block id="d5e153"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Other Data Binding Frameworks</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">8.4. Other Data Binding Frameworks</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
      
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        Although Preon is clearly targeting a different on disk
        representation of the data, it shares some similarities with
        Java data binding frameworks such as JAXB, and Hibernate. Just
        like JAXB And Hibernate, the classes defining the in-memory
        representation are annotated to define it relation with the
        encoded representation. In JAXB, that encoded representation
        is XML. In Hibernate, the encoded representation is a number
        of tables in a relational database. In Preon, the encoded
        representation is a sequence of bits.
      </fo:block>
      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
        It may be possible to harmonize Preon with these frameworks on
        an API level, but it's questionable if there would be
        immediate benefits from doing so.
      </fo:block>
    </fo:block>
  </fo:block>

  <fo:block id="d5e157"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">State of Preon</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">9. State of Preon</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Preon has been in development for a couple of years now. Its use
      has already been demonstrated on various file formats, including
      various file formats capturing geographical data, MPEG headers
      and image file formats. In March this year, Preon was used to
      capture the
      <fo:inline font-style="italic">full</fo:inline>
      structure of a Java Class
      file, resulting in the construction of a Java byte code decoder
      without a single line of imperative code.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      In April this year, Preon's documentation generation mechanism
      was revised. A release is planned before summer 2009. That
      release will not support encoding though. Early versions of
      <fo:inline font-style="italic">encoding</fo:inline>
      support have been removed from the
      code base. There have been a number of discussions on the types
      of encoding support (streaming, in-place, etc.) should be
      supported. The aim is to eventually have support for encoding to
      an output stream, and to start work on that after Preon's first
      release.
    </fo:block>
  </fo:block>

  <fo:block id="d5e163"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Availability of Preon</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">10. Availability of Preon</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Preon's source code and documentation is available at<fo:basic-link external-destination="url(http://preon.flotsam.nl/)">http://preon.flotsam.nl/</fo:basic-link>. Preon is licensed under a GPL
      + Classpath Exception license.
    </fo:block>
  </fo:block>

  <fo:block id="d5e167"><fo:block><fo:block><fo:block keep-together.within-column="always" margin-left="0pt" font-family="Calibri,Symbol,ZapfDingbats"><fo:block keep-with-next.within-column="always"><fo:block font-family="Calibri" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="start" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Conclusions and Future Work</fo:marker><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">11. Conclusions and Future Work</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
    
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      This paper presented Preon, a new way of dealing with
      binary/bitstream encoded data. Preon is designed to capture the
      encoded representation and its mapping to the in-memory runtime
      representation<fo:inline font-style="italic">only once</fo:inline>, and receive the
      decoder, the encoder
      <fo:inline font-style="italic">and</fo:inline>
      documentation on
      the format of the encoded representation for free.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Preon has been put to the test in various situations; mostly for
      decoding geographical data from various proprietary geographical
      file formats, but also for image file formats and Java
      bytecode. It's extensible, can work in a threadsafe mode, and
      offers a way to pull in data on demand, in order to minimize the
      impact on the heap.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Preon will first be released without support for encoding data;
      support for encoding is on the roadmap for the first release
      after that.
    </fo:block>
    <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
      Preon's meta model of the encoded representation continuous to
      be a source of inspiration for future work. It should be
      possible to use that meta model to generate diagrams of the
      format. It should also be possible to rely on Preon's meta model
      to annotate hexdumps, in order to explain the different bits and
      pieces of that hexdump.
    </fo:block>
    <fo:block id="d5e175" space-before.minimum="1em" space-before.optimum="1.5em" space-before.maximum="2em"><fo:block><fo:block><fo:block margin-left="0pt" font-size="24.8832pt" font-family="Calibri,Symbol,ZapfDingbats" font-weight="bold"><fo:block keep-with-next.within-column="always" space-before.optimum="10pt" space-before.minimum="10pt * 0.8" space-before.maximum="10pt * 1.2" hyphenate="false" text-align="start" start-indent="0pt" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2"><fo:block font-size="12pt" font-weight="bold" text-align="left" padding-top="1cm">Bibliography</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" start-indent="0.5in" text-indent="-0.5in" id="bib-bflavor">[1] <fo:inline text-transform="uppercase">Van Deursen</fo:inline>, Davy, <fo:inline text-transform="uppercase">De Neve</fo:inline>, Wesley, and <fo:inline text-transform="uppercase">Van De Walle</fo:inline>, Rik. <fo:inline font-style="italic">BFlavor: an Optimized XML-based Framework for Multimedia
          Content Customization
        </fo:inline>. </fo:block>

      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" start-indent="0.5in" text-indent="-0.5in" id="bib-xflavor">[2] <fo:inline text-transform="uppercase">Hong</fo:inline> and <fo:inline text-transform="uppercase">Eleftheriadis</fo:inline>. <fo:inline font-style="italic">XFlavor: Bridging Bits and Objects in Media
          Representation
        </fo:inline>. </fo:block>

      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" start-indent="0.5in" text-indent="-0.5in" id="bib-erlang-bit-syntax">[3] <fo:inline text-transform="uppercase">Ericcson</fo:inline>. <fo:inline font-style="italic">The bit syntax</fo:inline>. ©2000. Available 
          : &lt;<fo:basic-link external-destination="url(http://www.erlang.se/euc/00/bit_syntax.html)">http://www.erlang.se/euc/00/bit_syntax.html</fo:basic-link>&gt;. </fo:block>

      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" start-indent="0.5in" text-indent="-0.5in" id="bib-flavor-1">[4] <fo:inline text-transform="uppercase">Eleftheriadis</fo:inline>, A. and <fo:inline text-transform="uppercase">Hong</fo:inline>, Danny. Flavor: A Language for Media Representation. In <fo:inline text-transform="uppercase">Furht</fo:inline>, B. and <fo:inline text-transform="uppercase">Marques</fo:inline>, O. (ed.). <fo:inline font-style="italic">Handbook of Video Databases</fo:inline>. CRC Press, 2003. </fo:block>

      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" start-indent="0.5in" text-indent="-0.5in" id="bib-preon-introduction">[5] <fo:inline text-transform="uppercase">Springer</fo:inline>, Wilfred. <fo:inline font-style="italic">Preon Introduction</fo:inline>. September 18, 2008. Available 
          : &lt;<fo:basic-link external-destination="url(http://www.scribd.com/doc/8128172/Preon-Introduction)">http://www.scribd.com/doc/8128172/Preon-Introduction</fo:basic-link>&gt;. </fo:block>

      <fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" start-indent="0.5in" text-indent="-0.5in" id="bib-preon-presentation">[6] <fo:inline text-transform="uppercase">Springer</fo:inline>, Wilfred. <fo:inline font-style="italic">Preon</fo:inline>. Fall, 2008. Available 
          : &lt;<fo:basic-link external-destination="url(http://www.slideshare.net/springerw/preon-jfall-2008-presentation-746831)">http://www.slideshare.net/springerw/preon-jfall-2008-presentation-746831</fo:basic-link>&gt;. </fo:block>

    

  </fo:block>

</fo:flow></fo:page-sequence></fo:root>